1.路由重定向
    路由重定向：用户在访问地址A时，强制用户跳转到地址C，从而展示特定的组件页面
    通过路由规则的redirect属性，指定一个新的路由地址 ⭐⭐⭐
2.路由高亮
    1.使用默认的高亮class类
        被激活的路由链接，默认会应用一个router-link-active的类名。开发者可以使用此类名选择器，为激活的路由链接设置高亮的样式
        在index.css全局样式表中修改样式
    2.自定义路由高亮的class类
        在创建路由的实例对象时，开发者可以基于linkActiveClass属性，自定义路由链接被激活时所应用的类名
3.嵌套路由
    通过路由实现组件的嵌套使用
    1.声明子路由和子路由占位符
    2.在父路由规则中，通过children属性嵌套声明子路由规则⭐⭐⭐⭐

4.动态路由匹配⭐⭐⭐
    动态路由指的是：把Hash地址中可变的部分定义为参数项，从而提高路由规则的复用性。
    在vue-rotuer中使用英文的冒号(:)来定义路由的参数项
    { path: "/dynamic/:id", component: dynamic },
4.2 获取动态组件的参数值
    1.使用$route.params对象。通过动态路由匹配的方式渲染出来的组件中，可以使用$route.params对象访问到动态匹配的参数值
    2.使用props接收路由参数
        为了简化路由参数的获取形式，vue-router允许在路由规则中开启props传参。
        1.在路由规则中开启props传参
            props: true
        2.在组件内使用props接收路由规则中匹配到的参数项
        3.直接使用props中接收到的参数

通过调用API实现导航的方式，叫做编程式导航。与之对应的，通过点击链接实现导航的方式，叫做声明式导航
5.1 vue-router提供的编程式导航API，其中最常用的两个API分别是
    1.this.$router.push('hash地址')
        跳转到指定hash地址，从而展示对应的组件
    2.this.$router.go(num)
        实现导航历史的前进、后退

6.命名路由
    通过name属性为路由规则定义名称的方式，叫做命名路由
    命名路由的name值不能重复，必须保证唯一性
    1.在router.js中为一个路由规则定义name属性
        name: "about"
    2.在路由链接中使用name属性
        <router-link :to="{ name: 'about' }">About</router-link>
    3.在路由链接中添加params属性用于传递参数
        <router-link :to="{ name: 'about', params: { id: 123 }}">About</router-link>

7.导航守卫
    导航守卫：在路由跳转前和跳转后执行的一些操作，比如：权限验证、登录验证、页面加载进度条的显示、页面切换动画的效果等
    导航守卫的作用： 
    1.全局守卫：对路由进行全局的拦截，即在所有的路由规则中都能执行
        router.beforeEach((to, from, next) => {})
        全局守卫的回调函数接收三个参数：
        1.to：即将要进入的目标路由对象
        2.from：即将要离开的当前路由对象
        3.next：如果声明了这个参数，请手动调用next()，不调用则不会跳转
            next函数的三种调用方式
            next():直接放行，不做操作
            next(false):阻止路由的跳转，不做任何操作
            next('/path'):跳转到指定路径，不做任何操作
    2.路由守卫：对单个路由规则进行拦截，即在单个路由规则中执行
        在路由规则中添加指定函数
	beforeEach(to, from, next)：在用户每次导航触发之前执行，可用于执行全局性的逻辑，例如检查用户是否已登录或是否有权限访问该路由。
	beforeEnter(to, from, next)：在特定路由配置中使用，针对特定路由进行单独设置守卫，可用于在进入特定路由前执行一些逻辑，如检查用户是否具有管理员权限等。
	beforeRouteEnter(to, from, next)：在当前组件被激活前执行，可用于在用户进入当前页面前执行特定逻辑，如检查用户是否具有访问当前页面的权限。
	beforeRouteUpdate(to, from, next)：在当前路由更新时执行，可用于在当前路由复用（例如同个组件不同参数）时调用。
	beforeRouteLeave(to, from, next)：在用户离开当前路由时执行，可用于在用户离开当前页面前执行特定逻辑，比如显示确认对话框或保存未提交的数据。
