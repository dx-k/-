一、学习目标
    能够知道如何对props进行验证
    能够知道如何使用计算属性
    能够知道如何为组件自定义事件
    能够知道如何在组件上使用v-model

二、学习目录
    props验证
    计算属性
    自定义事件
    组件上的v-model
    任务列表案例

1.props验证
1.1 什么是props验证
    在封装组件时对外界传递过来的props数据进行合法性的校验，从而防止数据不合法的问题
1.2 对象类型的props节点
    使用对象类型的props节点，可以对每一个props进行数据类型的校验
1.3 props节点提供了多种数据验证方案
    基础的类型检查
    多个可能的类型
    必填项检验
    属性默认值
    自定义验证函数

2.计算属性  
2.1 什么是计算属性
    计算属性本质上就是一个function函数，它可以实时监听data中数据的变化，并return一个计算后的新值。供组件渲染DOM时使用
2.2 如何声明计算属性
    计算属性需要以function函数的形式声明到组件的computed选项中
2.3 计算属性的使用注意点
    计算属性必须定义在computed节点中
    计算属性必须是一个function函数
    计算属性必须有返回值
    计算属性必须当作普通属性使用
2.4 计算属性vs方法
    相对于方法来说，计算属性会缓存计算的结果，只有计算属性的依赖项发生变化时，才会重新计算。因此计算属性的性能更好

3.自定义事件
3.1 什么是自定义事件    
    在封装组件时，为了让组件的使用者可以监听到组件内状态的变化，此时需要用到组件的自定义事件
    就是子组件的数据发生变化时，可以通过this.$emit来调用父组件上的事件
3.2 自定义事件的三个使用步骤
    在封装组件时：
        1.声明自定义事件
        2.触发自定义事件
    在使用组件时
        3.监听自定义事件
    开发者为自定义组件封装的自定义事件，必须事先在emits节点中声明
    在emits节点下声明的自定义事件，可以通过this.$emit('自定义事件的名称')方法进行触发
3.3 自定义事件传参
    在调用this.$emit()方法触发自定义事件时，可以通过第二个参数为自定义事件传参

4.组件上的v-model指令
    1.为什么需要在组件上使用v-model指令
        v-model是双向数据绑定指令，当需要维护组件内外数据的同步时，可以在组件上使用v-model指令
        外界数据的变化会自动同步到counter组件中
        counter组件中的数据变化，也会自动同步到外界
    2.在组件上使用v-model的步骤
        父组件向子组件传递数据
        1.父组件通过v-bind属性绑定的形式，把数据传递给子组件
        2.子组件中，通过props接受父组件传递过来的数据

        子组件向父组件传递数据
        1.在v-bind指令之前添加v-model指令
        2.在子组件中声明emits自定义事件，格式为update:xxx
        3.调用$emit()触发自定义事件，在父组件使用v-on指令监听该自定义事件，并使用回调函数将参数更新

    